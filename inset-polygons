#!/usr/bin/env node
'use strict'

var buffer = require('turf-buffer')
var extent = require('turf-extent')
var distance = require('turf-distance')
var clip = require('turf-bbox-clip')
var getStdin = require('get-stdin')

var insetRatio = process.argv.length > 2 ? parseFloat(process.argv[2]) : 0.02

console.error('inset ratio', insetRatio)

// Special case handling for non-contiguous states/territories: we don't want
// to include them when we calculate the "full" width of the nation, and we
// don't want to use that "full" width when deciding how much to inset their
// borders
var discontiguous = ['AK', 'HI', 'PR']
function isContiguous (feat) {
  if (!feat.properties) { return true }
  var ret = discontiguous.indexOf(feat.properties.postal) < 0
  return ret
}

getStdin().then(function (stdin) {
  var polygons = JSON.parse(stdin)
  let fullWidth = getWidth(polygons)
  console.error(polygons.features.length + ' features')
  console.error('Full width', fullWidth)
  console.error('Default buffer', fullWidth * insetRatio)
  polygons.features = polygons.features
  .map(clipAtDateline)
  .map(function (f, i) {
    let name = f.properties.postal || f.properties.COUNTY || i
    try {
      let contiguous = isContiguous(f)
      let width = contiguous ? fullWidth : (2 * getWidth(f))
      let initialBuffer = -1 * width * insetRatio
      let minFeatureWidth = -initialBuffer * 1.5
      var feat = buffer(f, initialBuffer, 'miles')
      feat.properties = Object.assign({}, f.properties)
      let insetWidth = getWidth(feat)
      if (isNaN(insetWidth) || insetWidth < minFeatureWidth) {
        console.error('Below minimum width: ', name)
        return f
      }
      process.stderr.write('.')
      return feat
    } catch (e) {
      console.error(name)
      console.error(e.stack)
    }
    return f
  })
  console.error(polygons.features.length + ' inset features')
  console.log(JSON.stringify(polygons))
})
.catch(function (err) {
  console.error(err.stack)
})

function getWidth (f) {
  if (f.type === 'FeatureCollection') { f = fc(f.features.filter(isContiguous)) }
  let bbox = extent(f)
  return distance(point(bbox[0], bbox[1]), point(bbox[2], bbox[1]), 'miles')
}

function clipAtDateline (feature) {
  var clipped = clip(feature, [-180, -85, -67, 85])
  clipped.geometry.coordinates = clipped.geometry.coordinates.filter(dropEmpty)
  return clipped

  function dropEmpty (coords) {
    if (!coords || !coords.length) { return false }
    if (Array.isArray(coords[0])) { return coords.filter(dropEmpty) }
    return coords
  }
}

function point (x, y) {
  return {
    type: 'Feature',
    properties: {},
    geometry: {
      type: 'Point',
      coordinates: [x, y]
    }
  }
}

function fc (feats) {
  return {
    type: 'FeatureCollection',
    features: feats
  }
}

